# -*- coding: utf-8 -*-
"""Untitled27.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_sMPo4jNjvgXqr4AkhLELvBo8Ujau9_O
"""

import pandas as pd
import numpy  as np

movies  = pd.read_csv("/content/tmdb_5000_movies.csv" )
credits = pd.read_csv("/content/tmdb_5000_credits.csv")

movies.head(1)
# credits.head(1)
# here we are just check what data is present in given data sets

movies.shape

credits.shape

movies = movies.merge(credits ,on="title")
# we are merging our data

# gerner
# id
# keyword
# title
# overviews
# cast
# crew

movies = movies[['movie_id','title','overview','genres','cast','crew','keywords']]

# movies['original_language'].value_counts()
movies.info()

movies.head()

movies.isnull().sum()

movies.dropna(inplace= True)

movies.isnull().sum()

movies.duplicated().sum()

movies.iloc[0].genres

import ast
def convert(obj):
   l = []
   for i in ast.literal_eval(obj):
    l.append(i['name'])
   return l

movies['genres'] = movies['genres'].apply(convert)

movies['keywords'] = movies['keywords'].apply(convert)

movies.head()

def convert3(obj):
  l = []
  counter = 0
  for i in ast.literal_eval(obj):
    if counter != 3:
      l.append(l['name'])
      counter += 1
    else:
      break
  return l

movies['cast'] = movies['cast'].apply(convert)

movies.head()

def fetch_director(obj):
  l=[]
  for i in ast.literal_eval(obj):
    if i['job'] == 'Director':
      l.append(i['name'])
      break
  return l

movies['crew'] = movies['crew'].apply(fetch_director)

movies.head()

movies['overview'] = movies['overview'].apply(lambda x:x.split())

movies['keywords'] = movies['keywords'].apply(lambda x:[i.replace(" ","") for i in x])
movies['genres']   =   movies['genres'].apply(lambda x:[i.replace(" ","") for i in x])
movies['cast']     =   movies  ['cast'].apply(lambda x:[i.replace(" ","") for i in x])
movies['crew']     =   movies  ['crew'].apply(lambda x:[i.replace(" ","") for i in x])

movies.head()

movies['tags'] = movies['keywords'] + movies['genres'] + movies['cast'] + movies['crew']

movies.head()

new_df = movies[['movie_id','title','tags']]

new_df

new_df['tags'] = new_df['tags'].apply(lambda x:" ".join(x))

new_df['tags'][0]

new_df['tags'] =new_df['tags'].apply(lambda x:x.lower())

new_df.head()

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features = 5000,stop_words ='english')
import numpy

vectors = cv.fit_transform(new_df['tags']).toarray()



import nltk

from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()

def stem(text):
  y = []

  for i in text.split():
    y.append(ps.stem(i))
  return " ".join(y)

new_df['tags'] = new_df['tags'].apply(stem)

cv.get_feature_names_out()

form sklearn.metrics.pairwise import cosine

similarity = cosine_similarity(vectors)

new_df[new_df['title'] == 'Batman Begins'].index[0]

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=5000,stop_words='english')

vector = cv.fit_transform(new_df['tags']).toarray()

vector.shape

from sklearn.metrics.pairwise import cosine_similarity

similarity = cosine_similarity(vector)

new_df[new_df['title'] == 'The Lego Movie'].index[0]

def recommend(movie):
    index = new_df[new_df['title'] == movie].index[0]
    distances = sorted(list(enumerate(similarity[index])),reverse=True,key = lambda x: x[1])
    for i in distances[1:6]:

        print(new_df.iloc[i[0]].title)

recommend('Gandhi')

k